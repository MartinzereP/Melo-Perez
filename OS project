#include <iostream> 
#include <vector>
#include <algorithm>
#include <queue>
#include <thread>
#include <chrono>
#include "auth.h"
#include "Process.h"
#include "VirtualMemory.h"

using namespace std;

struct ScheduledProcess {
    Process process;
    int completion_time;
    int turnaround_time;
    int waiting_time;

    ScheduledProcess(Process p)
        : process(p), completion_time(0), turnaround_time(0), waiting_time(0) {}
};

void scheduleProcesses(vector<Process>& processes, string algorithm) {
    vector<ScheduledProcess> scheduled;
    int current_time = 0;

    if (algorithm == "SJF") {
        sort(processes.begin(), processes.end(), [](Process a, Process b) {
            return a.getBurst_time() < b.getBurst_time();
        });
    }

    for (auto& p : processes) {
        ScheduledProcess sp(p);

        if (current_time < p.getArrival_time()) {
            current_time = p.getArrival_time();
        }

        sp.waiting_time = current_time - p.getArrival_time();
        sp.completion_time = current_time + p.getBurst_time();
        sp.turnaround_time = sp.completion_time - p.getArrival_time();

        scheduled.push_back(sp);
        current_time = sp.completion_time;

        cout << "\nExecuting Process " << p.getPID() << "...\n";
        p.updateState("RUNNING");
        p.display();
        this_thread::sleep_for(chrono::seconds(p.getBurst_time()));

        p.updateState("TERMINATED");
        p.display();
    }

    double avg_turnaround = 0, avg_waiting = 0;
    for (const auto& sp : scheduled) {
        avg_turnaround += sp.turnaround_time;
        avg_waiting += sp.waiting_time;
    }
    avg_turnaround /= scheduled.size();
    avg_waiting /= scheduled.size();

    cout << "\nScheduling Results (" << algorithm << "):\n";
    cout << "PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n";
    for (const auto& sp : scheduled) {
        cout << sp.process.getPID() << "\t"
            << sp.process.getArrival_time() << "\t"
            << sp.process.getBurst_time() << "\t"
            << sp.completion_time << "\t\t"
            << sp.turnaround_time << "\t\t"
            << sp.waiting_time << "\n";
    }

    cout << "\nAverage Turnaround Time: " << avg_turnaround << endl;
    cout << "Average Waiting Time: " << avg_waiting << endl;
}

int main() {
    int counter = 0;
    for (int i = 0; i < 5; ++i) {
        cout << "\rLoading   " << flush;
        this_thread::sleep_for(chrono::milliseconds(500));

        cout << "\rLoading.  " << flush;
        this_thread::sleep_for(chrono::milliseconds(500));

        cout << "\rLoading.." << flush;
        this_thread::sleep_for(chrono::milliseconds(500));

        cout << "\rLoading..." << flush;
        this_thread::sleep_for(chrono::milliseconds(500));
    }

    cout << "\rLoading Complete!      " << endl;

    authenticateUser();

    vector<Process> processList = {
        Process(1, 0, 10, 1, 512, true),
        Process(2, 1, 5, 1, 512, true),
        Process(3, 2, 8, 1, 512, true),
        Process(4, 3, 2, 1, 512, true)
    };

    string choice;
    cout << "Choose Scheduling Algorithm (FCFS/SJF): ";
    cin >> choice;

    scheduleProcesses(processList, choice);

    cout << "\n--- Virtual Memory Simulation ---\n";
    VirtualMemoryManager vmManager(4096, 2048, 512);  // 4MB virtual, 2MB physical, 512KB pages

    vector<int> testAddresses = { 1000, 2048, 3000, 1024, 4096 };

    for (int i = 0; i < processList.size(); ++i) {
        int logicalAddress = testAddresses[i % testAddresses.size()];
        cout << "\nTranslating address " << logicalAddress << " for Process " << processList[i].getPID() << ":\n";
        int physicalAddress = vmManager.translateAddress(logicalAddress, processList[i]);
        if (physicalAddress != -1) {
            cout << "Physical Address: " << physicalAddress << "\n";
        }
    }

    for (auto& p : processList) {
        vmManager.printPageTable(p.getPID());
    }

    return 0;
}